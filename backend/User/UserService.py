from flask import Blueprint, request, jsonify
from database import mongo
from bson.objectid import ObjectId

user_service = Blueprint('user_service', __name__)

'''
Schema for user object
{
    "_id": "string",            #(playerId) generated by mongo
    "name": "string",
    "username": "string",
    "email": "string",
    "password": "string",
    "level": "int",
    "experience": "int",
}
'''

@user_service.route('/users', methods=['POST'])
def create_user():
    data = request.get_json()
    if(type(data) is list):
        #insert many
        for user in data:
            user['level'] = 1
            user['experience'] = 0
        mongo.db.users.insert_many(data)
        return jsonify({'message': 'Users created successfully'})
    
    data['level'] = 1
    data['experience'] = 0
    mongo.db.users.insert_one(data)
    return jsonify({'message': 'User created successfully'})

@user_service.route('/users', methods=['GET'])
def get_users():
    users = mongo.db.users.find()
    response = []
    for user in users:
        user["_id"] = str(user["_id"])
        response.append(user)
    return jsonify(response)

@user_service.route('/isuser', methods=['POST'])
def is_user():
    data = request.get_json()
    user = mongo.db.users.find_one({'name':data['username'],'password': data['password']})
    if user:
        return jsonify({'message': 'success'})
    return jsonify({'message': 'User not found'})


@user_service.route('/user/<user_id>', methods=['GET'])
def get_user(user_id):
    user = mongo.db.users.find_one({'_id': ObjectId(user_id)})
    if user:
        user["playerId"] = str(user["_id"])
        user.pop('_id', None)
        return jsonify(user)
    return jsonify({'message': 'User not found'})


@user_service.route('/user/<user_id>', methods=['PUT'])
def update_user(user_id):
    data = request.get_json()
    data.pop('playerId', None)
    mongo.db.users.update_one({'_id': ObjectId(user_id)}, {'$set':data })
    return jsonify({'message': 'User updated successfully'})


@user_service.route('/user/<user_id>', methods=['DELETE'])
def delete_user(user_id):
    mongo.db.users.delete_one({'_id': ObjectId(user_id)})
    return jsonify({'message': 'User deleted successfully'})
